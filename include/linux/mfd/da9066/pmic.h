/*
 * pmic.h  --  Power Managment Driver for Dialog DA9066 PMIC
 *
 * Copyright 2013 Dialog Semiconductor Ltd.
 *
 *  This program is free software; you can redistribute  it and/or modify it
 *  under  the terms of  the GNU General  Public License as published by the
 *  Free Software Foundation;  either version 2 of the  License, or (at your
 *  option) any later version.
 *
 */

#ifndef __LINUX_DA9066_PMIC_H
#define __LINUX_DA9066_PMIC_H

#include <linux/platform_device.h>
#include <linux/regulator/machine.h>
#include <linux/regulator/driver.h>

/*
 * Register values.
 */

enum {
/*
 * DC-DC's
 */
    DA9066_ID_BUCK_1,
    DA9066_ID_BUCK_2,
    DA9066_ID_BUCK_3,
    DA9066_ID_BUCK_4,
    DA9066_ID_BUCK_5,
    DA9066_ID_BUCK_6,
/*
 * LDOs
 */
    DA9066_ID_LDO_1,
    DA9066_ID_LDO_2,
    DA9066_ID_LDO_3,
    DA9066_ID_LDO_4,
    DA9066_ID_LDO_5,
    DA9066_ID_LDO_6,
    DA9066_ID_LDO_7,
    DA9066_ID_LDO_8,
    DA9066_ID_LDO_9,
    DA9066_ID_LDO_10,
    DA9066_ID_LDO_11,
    DA9066_ID_LDO_12,
    DA9066_ID_LDO_13,
    DA9066_ID_LDO_14,
    DA9066_ID_LDO_15,
    DA9066_ID_LDO_16,
    DA9066_ID_LDO_17,
    DA9066_ID_LDO_18,
    DA9066_ID_LDO_19,
    DA9066_ID_LDO_20,
};

#define DA9066_BUCK1_VOLT_LOWER 600000
#define DA9066_BUCK1_VOLT_UPPER 1400000
#define DA9066_BUCK1_VOLT_WIDTH 6250
#define DA9066_BUCK2_VOLT_LOWER 725000
#define DA9066_BUCK2_VOLT_UPPER 2075000
#define DA9066_BUCK2_VOLT_WIDTH 25000
#define DA9066_BUCK3_VOLT_LOWER 725000
#define DA9066_BUCK3_VOLT_UPPER 2075000
#define DA9066_BUCK3_VOLT_WIDTH 25000
#define DA9066_BUCK4_VOLT_LOWER 725000
#define DA9066_BUCK4_VOLT_UPPER 2075000
#define DA9066_BUCK4_VOLT_WIDTH 25000
#define DA9066_BUCK5_VOLT_LOWER 725000
#define DA9066_BUCK5_VOLT_UPPER 2075000
#define DA9066_BUCK5_VOLT_WIDTH 25000
#define DA9066_BUCK6_VOLT_LOWER 400000
#define DA9066_BUCK6_VOLT_UPPER 3500000
#define DA9066_BUCK6_VOLT_WIDTH 0

#define DA9066_LDO1_VOLT_LOWER 1000000
#define DA9066_LDO1_VOLT_UPPER 3100000
#define DA9066_LDO1_VOLT_WIDTH 50000
#define DA9066_LDO2_VOLT_LOWER 1000000
#define DA9066_LDO2_VOLT_UPPER 3100000
#define DA9066_LDO2_VOLT_WIDTH 50000
#define DA9066_LDO3_VOLT_LOWER 1200000
#define DA9066_LDO3_VOLT_UPPER 3300000
#define DA9066_LDO3_VOLT_WIDTH 50000
#define DA9066_LDO4_VOLT_LOWER 1200000
#define DA9066_LDO4_VOLT_UPPER 3300000
#define DA9066_LDO4_VOLT_WIDTH 50000
#define DA9066_LDO5_VOLT_LOWER 1200000
#define DA9066_LDO5_VOLT_UPPER 3300000
#define DA9066_LDO5_VOLT_WIDTH 50000
#define DA9066_LDO6_VOLT_LOWER 1200000
#define DA9066_LDO6_VOLT_UPPER 3300000
#define DA9066_LDO6_VOLT_WIDTH 50000
#define DA9066_LDO7_VOLT_LOWER 1200000
#define DA9066_LDO7_VOLT_UPPER 3300000
#define DA9066_LDO7_VOLT_WIDTH 50000
#define DA9066_LDO8_VOLT_LOWER 1200000
#define DA9066_LDO8_VOLT_UPPER 3300000
#define DA9066_LDO8_VOLT_WIDTH 50000
#define DA9066_LDO9_VOLT_LOWER 1200000
#define DA9066_LDO9_VOLT_UPPER 3300000
#define DA9066_LDO9_VOLT_WIDTH 50000
#define DA9066_LDO10_VOLT_LOWER 1200000
#define DA9066_LDO10_VOLT_UPPER 3300000
#define DA9066_LDO10_VOLT_WIDTH 50000
#define DA9066_LDO11_VOLT_LOWER 1200000
#define DA9066_LDO11_VOLT_UPPER 3300000
#define DA9066_LDO11_VOLT_WIDTH 50000
#define DA9066_LDO12_VOLT_LOWER 1200000
#define DA9066_LDO12_VOLT_UPPER 3300000
#define DA9066_LDO12_VOLT_WIDTH 50000
#define DA9066_LDO13_VOLT_LOWER 1200000
#define DA9066_LDO13_VOLT_UPPER 3300000
#define DA9066_LDO13_VOLT_WIDTH 50000
#define DA9066_LDO14_VOLT_LOWER 1200000
#define DA9066_LDO14_VOLT_UPPER 3300000
#define DA9066_LDO14_VOLT_WIDTH 50000
#define DA9066_LDO15_VOLT_LOWER 1200000
#define DA9066_LDO15_VOLT_UPPER 3300000
#define DA9066_LDO15_VOLT_WIDTH 50000
#define DA9066_LDO16_VOLT_LOWER 1200000
#define DA9066_LDO16_VOLT_UPPER 3300000
#define DA9066_LDO16_VOLT_WIDTH 50000
#define DA9066_LDO17_VOLT_LOWER 1200000
#define DA9066_LDO17_VOLT_UPPER 3300000
#define DA9066_LDO17_VOLT_WIDTH 50000
#define DA9066_LDO18_VOLT_LOWER 1200000
#define DA9066_LDO18_VOLT_UPPER 3300000
#define DA9066_LDO18_VOLT_WIDTH 50000
#define DA9066_LDO19_VOLT_LOWER 1200000
#define DA9066_LDO19_VOLT_UPPER 3300000
#define DA9066_LDO19_VOLT_WIDTH 50000
#define DA9066_LDO20_VOLT_LOWER 1200000
#define DA9066_LDO20_VOLT_UPPER 3300000
#define DA9066_LDO20_VOLT_WIDTH 50000
#define DA9066_LDOAUD1_VOLT_LOWER 1200000
#define DA9066_LDOAUD1_VOLT_UPPER 3300000
#define DA9066_LDOAUD1_VOLT_WIDTH 50000
#define DA9066_LDOAUD2_VOLT_LOWER 1200000
#define DA9066_LDOAUD2_VOLT_UPPER 3300000
#define DA9066_LDOAUD2_VOLT_WIDTH 50000


/*regualtor DSM settings */
enum da9066_mode_in_dsm {
    DA9066_REGULATOR_LPM_IN_DSM = 0,  /* LPM in DSM(deep sleep mode) */
    DA9066_REGULATOR_OFF_IN_DSM,      /* OFF in DSM */
    DA9066_REGULATOR_ON_IN_DSM,       /* LPM in DSM */
    DA9066_REGULATOR_MAX,
};

/* TODO MW: move those to da9066_reg.h -
 * this are bimask specific to registers' map */
/* CONF and EN is same for all */

/* TODO MW: description*/
#define DA9066_REGULATOR_MCTL3           (3<<6)
#define DA9066_REGULATOR_MCTL2           (3<<4)
#define DA9066_REGULATOR_MCTL1           (3<<2)
#define DA9066_REGULATOR_MCTL0           (3<<0)

/* TODO MW:  figure out more descriptive names to distinguish
 *	between global M_CTLx state
 * determined by hardware, and the mode for each regulator
 *	configured in BUCKx/LDOx_MCTLy register */

/* MCTL values for regulator bits ... TODO finish description */
#define REGULATOR_MCTL_OFF     0
#define REGULATOR_MCTL_ON      1
#define REGULATOR_MCTL_SLEEP   2
#define REGULATOR_MCTL_TURBO   3 /* Available only for BUCK1 */

#define DA9066_REG_MCTL3_SHIFT  6 /* Bits [7:6] in BUCKx/LDOx_MCTLy register */
#define DA9066_REG_MCTL2_SHIFT  4 /* Bits [5:4] in BUCKx/LDOx_MCTLy register */
#define DA9066_REG_MCTL1_SHIFT  2 /* Bits [3:2] in BUCKx/LDOx_MCTLy register */
#define DA9066_REG_MCTL0_SHIFT  0 /* Bits [1:0] in BUCKx/LDOx_MCTLy register */

/* When M_CTL1 = 1, M_CTL2 = 1
 * (M_CTL3: global Turbo Mode), regultor is: */
#define DA9066_REGULATOR_MCTL3_OFF    \
			(REGULATOR_MCTL_OFF   << DA9066_REG_MCTL3_SHIFT)
#define DA9066_REGULATOR_MCTL3_ON     \
			(REGULATOR_MCTL_ON    << DA9066_REG_MCTL3_SHIFT)
#define DA9066_REGULATOR_MCTL3_SLEEP  \
			(REGULATOR_MCTL_SLEEP << DA9066_REG_MCTL3_SHIFT)
#define DA9066_REGULATOR_MCTL3_TURBO  \
			(REGULATOR_MCTL_TURBO << DA9066_REG_MCTL3_SHIFT)

/* When M_CTL1 = 1, M_CTL2 = 0
 * (M_CTL2: TBD: To Be Defined Mode), regulator is: */
#define DA9066_REGULATOR_MCTL2_OFF   \
			(REGULATOR_MCTL_OFF   << DA9066_REG_MCTL2_SHIFT)
#define DA9066_REGULATOR_MCTL2_ON    \
			(REGULATOR_MCTL_ON    << DA9066_REG_MCTL2_SHIFT)
#define DA9066_REGULATOR_MCTL2_SLEEP \
			(REGULATOR_MCTL_SLEEP << DA9066_REG_MCTL2_SHIFT)
#define DA9066_REGULATOR_MCTL2_TURBO \
			(REGULATOR_MCTL_TURBO << DA9066_REG_MCTL2_SHIFT)

/* When M_CTL1 = 0, M_CTL2 = 1
 * (M_CTL1: Normal Mode), regulator is: */
#define DA9066_REGULATOR_MCTL1_OFF   \
			(REGULATOR_MCTL_OFF   << DA9066_REG_MCTL1_SHIFT)
#define DA9066_REGULATOR_MCTL1_ON    \
			(REGULATOR_MCTL_ON    << DA9066_REG_MCTL1_SHIFT)
#define DA9066_REGULATOR_MCTL1_SLEEP \
			(REGULATOR_MCTL_SLEEP << DA9066_REG_MCTL1_SHIFT)
#define DA9066_REGULATOR_MCTL1_TURBO \
			(REGULATOR_MCTL_TURBO << DA9066_REG_MCTL1_SHIFT)

/* When M_CTL1 = 0, M_CTL2 = 0
 * (M_CTL0: Sleep Mode), regulator is: */
#define DA9066_REGULATOR_MCTL0_OFF   \
			(REGULATOR_MCTL_OFF   << DA9066_REG_MCTL0_SHIFT)
#define DA9066_REGULATOR_MCTL0_ON    \
			(REGULATOR_MCTL_ON    << DA9066_REG_MCTL0_SHIFT)
#define DA9066_REGULATOR_MCTL0_SLEEP \
			(REGULATOR_MCTL_SLEEP << DA9066_REG_MCTL0_SHIFT)
#define DA9066_REGULATOR_MCTL0_TURBO \
			(REGULATOR_MCTL_TURBO << DA9066_REG_MCTL0_SHIFT)


struct da9066;
struct platform_device;
struct regulator_init_data;


struct da9066_pmic {
    /* Number of regulators of each type on this device */
	struct platform_device *pdev[25];
};

int da9066_platform_regulator_init(struct da9066 *da9066);

#endif  /* __LINUX_DA9066_PMIC_H */

